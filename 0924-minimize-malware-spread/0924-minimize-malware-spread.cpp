// Connect nodes and group them
// Traverse the initial array and for each i
    // If parent i is not found, track the size of parent[i], insert parent[i] in a set
    // Else set size of parent[i] zero
// Return the max size of a parent

class Solution {
public:
    vector<int> par, sz;
    int findPar(int n){
        if(n==par[n]){ return n; }
        return par[n]=findPar(par[n]);
    }
    void merge(int a, int b){
        a=findPar(a), b=findPar(b);
        if(a==b){ return; }
        if(sz[a]<sz[b]){ swap(a,b); }
        par[b]=a; sz[a]+=sz[b];
    }
    int minMalwareSpread(vector<vector<int>>& g, vector<int>& initial) {
        int n=g.size();
        sort(begin(initial),end(initial));
        par=vector<int>(n); sz=vector<int>(n,1);
        for(int i=0; i<n; i++){ par[i]=i; }
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(i!=j and g[i][j]==1){
                    merge(i,j);
                }
            }
        }
        int ans=initial[0], mxSize=-1;
        set<int> duplicates, newOnes;
        map<int,int> sizes;
        for(auto &i:initial){
            if(newOnes.count(findPar(i))){
                // cout<<"Found node with parent "<<findPar(i)<<endl;
                duplicates.insert(findPar(i));
            }
            else{
                // cout<<"Found node with size "<<sz[findPar(i)]<<endl;
                sizes[i]=sz[findPar(i)];
                newOnes.insert(findPar(i));
            }
        }
        for(auto &[i,curr]:sizes){
            int parent=findPar(i);
            if(duplicates.count(parent)){ continue; }
            if(curr>mxSize){
                mxSize=curr;
                ans=i;
            }
        }
        return ans;
    }
};